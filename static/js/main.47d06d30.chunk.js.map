{"version":3,"sources":["components/job.jsx","components/searchBar.jsx","App.js","serviceWorker.js","index.js"],"names":["Job","badge_new","badge_featured","language","tool","job_classes","this","props","job","new","className","featured","languages","map","onClick","key","tools","Fragment","src","logo","alt","id","company","position","postedAt","contract","location","Component","SearchBar","state","classes","items","length","item","onDelete","onClear","App","selected","data","handleClick","option","includes","target","innerText","toast","error","setState","concat","filter","toolsAndLanguages","handleDelete","i","handleClear","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.47d06d30.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Job extends Component {\r\n    \r\n\r\n    \r\n    render() {\r\n        let badge_new;\r\n        let badge_featured;\r\n        let language;\r\n        let tool;\r\n        let job_classes = \"job row\";\r\n        if (this.props.job.new){\r\n            badge_new = <h5 className=\"badge new\">New!</h5>\r\n        }else{\r\n            badge_new = ''\r\n        }\r\n        if (this.props.job.featured){\r\n            badge_featured = <h5 className=\"badge featured\">Featured</h5>\r\n            job_classes = \"job row job-featured\"\r\n        }else{\r\n            badge_featured = ''\r\n        }\r\n        if(this.props.job.languages){\r\n            language = this.props.job.languages.map(language => <p className=\"badge-main\" onClick={this.props.onClick} key={language}>{language}</p>)\r\n        }\r\n        if(this.props.job.tools){\r\n            tool = this.props.job.tools.map(tool => <p key={tool} onClick={this.props.onClick} className=\"badge-main\">{tool}</p>)\r\n        }\r\n        return ( \r\n            <React.Fragment>\r\n                <div className={job_classes}>\r\n                    <div className=\"col-1\">\r\n                        <img src={this.props.job.logo} alt=\"logo\" id=\"logo\" />\r\n                    </div>\r\n                    <div className=\"job-main col-6\">\r\n                        <div className=\"job-upper\">\r\n                            <p className=\"company\">{this.props.job.company}</p>\r\n                            <div className=\"badges-1\">\r\n                                {badge_new}\r\n                                {badge_featured}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"job-mid\">\r\n                            <h3 className=\"position\">{this.props.job.position}</h3>\r\n                        </div>\r\n                        <div className=\"job-bot\">\r\n                            <p className=\"common\">{this.props.job.postedAt}</p>\r\n                            <p className=\"point\">•</p>\r\n                            <p className=\"common\">{this.props.job.contract}</p>\r\n                            <p className=\"point\">•</p>\r\n                            <p className=\"common\">{this.props.job.location}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"badges col-4\">\r\n                        {language}\r\n                        {tool}\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );            \r\n    }\r\n}\r\n \r\nexport default Job;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass SearchBar extends Component {\r\n    state = {  }\r\n\r\n    render() { \r\n        let classes;\r\n        if(this.props.items.length < 1) {\r\n            classes = \"none\" \r\n        }else{\r\n            classes = \"searchBar\"\r\n        }\r\n        return ( \r\n            <div className={classes}>\r\n                {this.props.items.map(item => (\r\n                    <div className=\"selected-item row\" key={item}>\r\n                        <h5 className=\"selected-text \">{item}</h5>\r\n                        <button className=\"undo\" onClick={() => this.props.onDelete(item)}><i className=\"fas fa-times\"></i></button>\r\n                    </div>\r\n                ))}\r\n                <button className=\"clear\" onClick={this.props.onClear} >Clear</button>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default SearchBar;","import React, { Component } from 'react';\nimport './App.css';\nimport Job from './components/job';\nimport data from './components/data/data.json';\nimport SearchBar from './components/searchBar';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nclass App extends Component {\n  state = { \n    selected: [],\n    data: data\n   }\n  handleClick = (option) => {\n  if(this.state.selected.includes(option.target.innerText)){\n    toast.error('Cannot add same item 2 times.')\n  }else if(this.state.selected.length >= 5){\n    toast.error('Cannot add more than 5 items.')\n  }else{\n    this.setState({\n      selected: this.state.selected.concat([option.target.innerText])\n    })\n\n\n    //////////////// VESRSION 1 ////////////////////\n    // const data = (this.state.data.map(selected => (\n    //   selected.languages ? console.log(selected.languages.filter(selected.languages == target.innerText)) : ''\n    // )))\n    /////////////// VERSION 2 ///////////////////\n\n    // let data = this.state.data.filter(selected => selected.languages ? selected.languages.includes(option.target.innerText): false)\n    \n    ///////////// VERSION 3 //////////////////\n    let data = this.state.data.filter(selected => selected.toolsAndLanguages.includes(option.target.innerText))\n    this.setState({data})\n   } \n  }\n  handleDelete = (item) => {\n    const originalSelected = [...this.state.selected];\n    const selected = originalSelected.filter(i => i !== item);\n    this.setState({selected});\n    this.setState({data});\n  }\n  handleClear = () => {\n    const selected = [];\n    this.setState({selected});\n    this.setState({data});\n  }\n  \n  render() { \n    \n    return (\n      <React.Fragment>\n        <ToastContainer />\n        <SearchBar items={this.state.selected} onDelete={this.handleDelete} onClear={this.handleClear}/>\n        {this.state.data.map(job => (\n          <Job job={job} key={job.id} onClick={this.handleClick}/>\n        ))}\n      </React.Fragment>\n    );\n  }\n}\n \nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}